[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'altercation/vim-colors-solarized'
hook_add = '''
  if empty($SOLARIZED)
    let g:solarized_termtrans = 0
    let g:solarized_termcolors = 256
  else
    let g:solarized_termtrans = 1
    let g:solarized_termcolors = 16
    set background=dark
    autocmd MyAutoCmd VimEnter * nested colorscheme solarized
  endif
'''

[[plugins]]
repo = 'jonathanfilip/vim-lucius'

[[plugins]]
repo = 'dracula/vim'
hook_add = '''
  if empty($SOLARIZED)
    set background=dark
    autocmd MyAutoCmd VimEnter * nested colorscheme dracula
  endif
'''

[[plugins]]
repo = 'junegunn/seoul256.vim'

[[plugins]]
repo = 'joshdick/onedark.vim'

[[plugins]]
repo = 'tomasr/molokai'

[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo = 'w0ng/vim-hybrid'

[[plugins]]
repo = 'nanotech/jellybeans.vim'

# [[plugins]]
# repo = 'vim-airline/vim-airline'
# depends = 'vim-airline/vim-airline_themes'
# hook_add = '''
# set noshowmode
# " let g:airline_solarized_bg='dark'
# let g:airline_theme='dracula'
# let g:airline_symbols_ascii = 1
#
# let g:airline#extensions#tabline#enabled = 1
# let g:airline#extensions#tmuxline#enabled = 0
#
# nnoremap [Buffer] <NOP>
# nmap <Space>b [Buffer]
#
# nnoremap <silent> [Buffer]n :<C-u>bnext<CR>
# nnoremap <silent> [Buffer]p :<C-u>bprevious<CR>
# '''
#
# [[plugins]]
# repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = 'source ~/.vim/rc/lightline.rc.vim'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tyru/caw.vim'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'cohama/lexima.vim'
hook_add = '''
 let g:lexima_ctrlh_as_backspace = 1
'''

# [[plugins]]
# repo = 'easymotion/vim-easymotion'
# hook_add = '''
#   let g:EasyMotion_do_mapping = 0
#   nmap s <Plug>(easymotion-s2)
#   let g:EasyMotion_space_jump_first = 1
# '''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'yuys13/partedit.vim'
hook_add = '''
  nmap <silent> <Space>pe <Plug>(partedit_start_context)
'''

[[plugins]]
repo = 'junegunn/fzf'
if = 'executable("fzf")'
hook_add = '''
  if executable('rg')
    let $FZF_DEFAULT_COMMAND = 'rg --files'
  endif

  " Using the custom window creation function
  let g:fzf_layout = { 'window': { 'width': 0.7, 'height': 0.9 } }
'''

[[plugins]]
repo = 'junegunn/fzf.vim'
if = 'executable("fzf")'
hook_add = '''
  let g:fzf_command_prefix = 'Fzf'

  command! -bang -nargs=? -complete=dir FzfFiles
        \ call fzf#vim#files(<q-args>,
        \ fzf#vim#with_preview('right:50%', '?'),
        \ <bang>0)

  command! -bang -nargs=? FzfGFiles
        \ call fzf#vim#gitfiles(<q-args>,
        \ fzf#vim#with_preview('right:50%', '?'),
        \ <bang>0)

  command! -bang -nargs=* FzfRg
        \ call fzf#vim#grep(
        \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
        \    fzf#vim#with_preview('right:50%', '?'),
        \   <bang>0)

  " prefix
  nnoremap <Plug>(fzf) <NOP>
  nmap <Space>f <Plug>(fzf)
  nnoremap <expr> <Plug>(fzf)f (len(system('git rev-parse')) ?
        \':FzfFiles' :
        \':FzfGFiles -co --exclude-standard')."\<cr>"
  nnoremap <Plug>(fzf)af :<C-u>FzfFiles<CR>
  nnoremap <Plug>(fzf)if :<C-u>FzfGFiles -co --exclude-standard -i<CR>
  nnoremap <Plug>(fzf)b :<C-u>FzfBuffer<CR>
  nnoremap <Plug>(fzf)t :<C-u>FzfTags<CR>
  nnoremap <Plug>(fzf): :<C-u>FzfHistory:<CR>
  nnoremap <Plug>(fzf)h :<C-u>FzfHelptags<CR>
  nnoremap <Plug>(fzf)/ :<C-u>FzfRg<Space>

  nnoremap FT :<C-u>FzfFiletypes<CR>
  nnoremap <Plug>(fzf)cs :<C-u>FzfColors<CR>

  nnoremap <Space>/ :<C-u>FzfBLines<CR>
'''

[[plugins]]
repo = 'AndrewRadev/linediff.vim'
hook_add = '''
  let g:linediff_first_buffer_command = 'topleft new'
  let g:linediff_second_buffer_command = 'vertical new'
  autocmd MyAutoCmd User LinediffBufferReady nnoremap <buffer> q :LinediffReset<cr>

  let g:linediff_modify_statusline = 0
'''

[[plugins]]
repo = 'thinca/vim-localrc'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/neco-syntax'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'deoplete-plugins/deoplete-zsh'

[[plugins]]
repo = 'zplug/vim-zplug'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'leafgarland/typescript-vim'

[[plugins]]
repo = 'elzr/vim-json'
hook_add = '''
  let g:vim_json_syntax_conceal = 0
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  let g:indentLine_showFirstIndentLevel = 1
  let g:indentLine_bufTypeExclude = ['nofile', 'help']
  let g:indentLine_fileTypeExclude = ['']

  function! s:myIndentLineReset() abort
    if exists('b:indentLine_enabled') ? b:indentLine_enabled :
          \ get(g:, 'indentLine_enabled', 0)
      IndentLinesReset
    endif
  endfunction

  " for vim-precious
  autocmd MyAutoCmd User PreciousFileType call s:myIndentLineReset()
'''

[[plugins]]
repo = 't9md/vim-quickhl'
hook_add = '''
  nmap <Space>hl <Plug>(quickhl-manual-this)
  nmap <Space>nohl <Plug>(quickhl-manual-reset)
'''

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  " messages
  let g:ale_echo_msg_format = '[%linter%] %code: %%s [%severity%]'

  " linters
  " let g:ale_linters = {
  "     \ 'go': ['go build', 'gofmt', 'golint',
  "     \        'gosimple', 'gotype', 'go vet', 'staticcheck'],
  "     \ }

  let g:ale_linters_ignore = {
        \ 'typescript': ['tsserver'],
        \ 'typescriptreact': ['tsserver'],
        \ }

  " fixers
  let g:ale_fix_on_save = 1
  let g:ale_go_gofmt_options = '-s'
  let g:ale_fixers = {
        \ 'go': ['gofmt', 'goimports'],
        \ 'rust': ['rustfmt'],
        \ 'python': ['black', 'isort'],
        \ 'typescript': ['prettier'],
        \ 'typescriptreact': ['prettier'],
        \ 'javascript': ['prettier'],
        \ 'javascriptreact': ['prettier'],
        \ 'json': ['prettier'],
        \ 'fish': ['fish_indent'],
        \ }

  " Map movement through errors without wrapping.
  nmap <silent> <C-k> <Plug>(ale_previous)
  nmap <silent> <C-j> <Plug>(ale_next)

  " Dockerfile
  let g:ale_dockerfile_hadolint_use_docker = 'yes'

  " rust
  let g:ale_rust_cargo_use_clippy = executable('cargo-clippy')
'''

# [[plugins]]
# repo = 'jsfaint/gen_tags.vim'
# if = 'executable("ctags") || executable("gtags")'
# hook_add = '''
#   let g:loaded_gentags#ctags = !executable("ctags")
#   let g:loaded_gentags#gtags = !executable("gtags")
#   let g:gen_tags#ctags_auto_gen  = executable("ctags")
#   let g:gen_tags#gtags_auto_gen  = executable("gtags")
# '''

[[plugins]]
repo = 'ozelentok/denite-gtags'
hook_add = '''
  " prefix
  nnoremap <Plug>(gtags) <NOP>
  nmap <Space>g <Plug>(gtags)

  " keymap
  nnoremap <silent> <Plug>(gtags)d :<C-u>DeniteCursorWord gtags_def -buffer-name=gtags -mode=normal<CR>
  nnoremap <silent> <Plug>(gtags)r :<C-u>DeniteCursorWord gtags_ref -buffer-name=gtags -mode=normal<CR>
  nnoremap <silent> <Plug>(gtags)c :<C-u>DeniteCursorWord gtags_context -buffer-name=gtags -mode=normal<CR>
'''

[[plugins]]
repo = 'kassio/neoterm'
hook_add = '''
 nnoremap <Space>nl :<C-u>rightbelow vertical Tnew<CR>
 nnoremap <Space>nh :<C-u>vertical Tnew<CR>
 nmap <Space>nn <Plug>(neoterm-repl-send-line)
 xmap <Space>nn <Plug>(neoterm-repl-send)
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
  let g:netrw_nogx = 1 " disable netrw's gx mapping.
  nmap gx <Plug>(openbrowser-smart-search)
  xmap gx <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'

[[plugins]]
repo = 'ywatase/mdt.vim'
if = 'executable("mdt")'

# [[plugins]]
# repo = 'osyo-manga/vim-precious'
# hook_add = '''
# let g:precious_enable_switch_CursorMoved = {
#      \	'help' : 0
#      \}
# let g:precious_enable_switch_CursorMoved_i= {
#      \	'help' : 0
#      \}
# let g:precious_enable_switch_CursorHold= {
#      \	'*' : 0
#      \}
#
#   " for PartEdit
#   function! PartEditGetContext()
#     let l:con = context_filetype#get(precious#base_filetype())
#     let l:ret = {
#          \ 'filetype': l:con.filetype,
#          \ 'firstline': l:con.range[0][0],
#          \ 'lastline': l:con.range[1][0],
#          \}
#     return l:ret
#   endfunction
# '''

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    " nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    inoremap <buffer> <expr><c-f> lsp#scroll(+4)
    inoremap <buffer> <expr><c-d> lsp#scroll(-4)

    let g:lsp_format_sync_timeout = 1000
    autocmd! MyAutoCmd BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')

    " refer to doc to add more commands
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'

[[plugins]]
repo = 'edkolev/tmuxline.vim'
hook_add = '''
let g:tmuxline_powerline_separators = 0
let g:tmuxline_separators = {
      \ 'left' : '',
      \ 'left_alt': '',
      \ 'right' : '',
      \ 'right_alt' : '',
      \ 'space' : ' '}
let g:tmuxline_preset = {
    \'a'       : '#{?client_prefix,PREFIX,#S}',
    \'win'     : ['#I','#W'],
    \'cwin'    : ['#I','#W','#F'],
    \'x'       : '%Y-%m-%d(%a)',
    \'y'       : '%H:%M:%S',
    \'z'       : '#H',
    \'options' : {'status-justify' : 'left'}}
'''

[[plugins]]
repo = 'roxma/nvim-yarp'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

