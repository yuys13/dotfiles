scriptencoding utf-8

" reset augroup
augroup MyAutoCmd
  autocmd!
augroup END

execute 'source' fnamemodify(expand('<sfile>'), ':h') . '/dein.vim'

" Keymap
imap <silent> jj <ESC>
autocmd MyAutoCmd TerminalOpen * tnoremap <buffer> jj <C-w>N

set backspace=indent,eol,start

" Display
set ruler
set showcmd
set number
set nowrap
set list
"set listchars=tab:»-,trail:-,extends:»,precedes:«,nbsp:%,eol:↲
set listchars=tab:»-,trail:-,extends:»,precedes:«,nbsp:%
set colorcolumn=80
set cursorline
set breakindent
set showbreak=↪

set diffopt&
set diffopt+=vertical

if $COLORTERM =~? 'truecolor\|24bit'
  set termguicolors
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

if &term =~? 'xterm' || &term ==? 'win32'
  " Use DECSCUSR escape sequences
  let &t_SI = "\e[5 q"    " blink bar
  let &t_SR = "\e[3 q"    " blink underline
  let &t_EI = "\e[1 q"    " blink block
  let &t_ti ..= "\e[1 q"   " blink block
  let &t_te ..= "\e[0 q"   " default (depends on terminal, normally blink block)
endif

autocmd MyAutoCmd VimResized * wincmd =

" Search
set ignorecase
set smartcase
set incsearch

" Indent
set expandtab
set shiftwidth=4
set tabstop=4
set softtabstop=4

" Clipboard
set clipboard&
set clipboard^=unnamed
set clipboard^=unnamedplus

" Cmdline completion
set wildmenu
set wildmode=longest,full
set wildoptions=pum

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has('gui_running')
  syntax on
  set hlsearch
endif

" temporary settings
set noswapfile

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Setting grep tools
if executable('rg')
  let &grepprg = 'rg --vimgrep --smart-case --hidden'
  set grepformat=%f:%l:%c:%m,%f:%l:%m
elseif executable('hw')
  set grepprg=hw\ --no-group\ --no-color
elseif executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor
endif

augroup vimrc-auto-mkdir  " {{{
  autocmd!
  autocmd BufWritePre * call s:auto_mkdir(expand('<afile>:p:h'), v:cmdbang)
  function! s:auto_mkdir(dir, force)  " {{{
    if !isdirectory(a:dir) && (a:force ||
    \    input(printf('"%s" does not exist. Create? [y/N]', a:dir)) =~? '^y\%[es]$')
      call mkdir(iconv(a:dir, &encoding, &termencoding), 'p')
    endif
  endfunction  " }}}
augroup END  " }}}
