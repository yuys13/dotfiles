[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'altercation/vim-colors-solarized'
hook_add = '''
  if empty($SOLARIZED)
    let g:solarized_termtrans = 0
    let g:solarized_termcolors = 256
  else
    let g:solarized_termtrans = 1
    let g:solarized_termcolors = 16
    set background=dark
    autocmd MyAutoCmd VimEnter * nested colorscheme solarized
  endif
'''

[[plugins]]
repo = 'jonathanfilip/vim-lucius'
hook_add = '''
  if empty($SOLARIZED)
    set background=dark
    autocmd MyAutoCmd VimEnter * nested colorscheme lucius
  endif
'''

[[plugins]]
repo = 'tomasr/molokai'

[[plugins]]
repo = 'w0ng/vim-hybrid'

[[plugins]]
repo = 'nanotech/jellybeans.vim'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = 'source ~/.config/nvim/rc/lightline.rc.vim'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
  let g:EasyMotion_do_mapping = 0
  nmap s <Plug>(easymotion-s2)
  let g:EasyMotion_space_jump_first = 1
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'yuys13/partedit.vim'
hook_add = '''
  nmap <silent> <Space>pe <Plug>(partedit_start_context)
'''

[[plugins]]
repo = '~/dev/src/github.com/junegunn/fzf'
if = 'executable("fzf")'
hook_add = '''
  let $FZF_DEFAULT_OPTS = '--reverse'
  autocmd MyAutoCmd FileType fzf set laststatus=0
        \| autocmd MyAutoCmd BufLeave <buffer> set laststatus=2
'''

[[plugins]]
repo = 'junegunn/fzf.vim'
if = 'executable("fzf")'
hook_add = '''
  let g:fzf_command_prefix = 'Fzf'

  command! -bang -nargs=? -complete=dir FzfFiles
        \ call fzf#vim#files(<q-args>,
        \ fzf#vim#with_preview('right:50%', '?'),
        \ <bang>0)

  command! -bang -nargs=? -complete=dir FzfGFiles
        \ call fzf#vim#gitfiles(<q-args>,
        \ fzf#vim#with_preview('right:50%', '?'),
        \ <bang>0)

  command! -bang -nargs=* FzfRg
        \ call fzf#vim#grep(
        \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
        \    fzf#vim#with_preview('right:50%', '?'),
        \   <bang>0)

  " prefix
  nnoremap [FZF] <NOP>
  nmap <Space>f [FZF]
  nnoremap <expr> [FZF]f (len(system('git rev-parse')) ? ':FzfFiles' : ':FzfGFiles')."\<cr>"
  nnoremap [FZF]af :<C-u>FzfFiles<CR>
  nnoremap [FZF]b :<C-u>FzfBuffer<CR>
  nnoremap [FZF]t :<C-u>FzfTags<CR>
  nnoremap [FZF]: :<C-u>FzfHistory:<CR>
  nnoremap [FZF]h :<C-u>FzfHelptags<CR>
  nnoremap [FZF]/ :<C-u>FzfRg<Space>

  nnoremap FT :<C-u>FzfFiletypes<CR>
  nnoremap [FZF]cs :<C-u>FzfColors<CR>

  nnoremap <Space>/ :<C-u>FzfBLines<CR>
'''

[[plugins]]
repo = 'AndrewRadev/linediff.vim'
hook_add = '''
  let g:linediff_first_buffer_command = 'topleft new'
  let g:linediff_second_buffer_command = 'vertical new'
  autocmd MyAutoCmd User LinediffBufferReady nnoremap <buffer> q :LinediffReset<cr>

  let g:linediff_modify_statusline = 0
'''

[[plugins]]
repo = 'thinca/vim-localrc'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/neco-syntax'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'deoplete-plugins/deoplete-zsh'

[[plugins]]
repo = 'zplug/vim-zplug'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'elzr/vim-json'
hook_add = '''
  let g:vim_json_syntax_conceal = 0
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  let g:indentLine_bufTypeExclude = ['nofile', 'help']
  let g:indentLine_fileTypeExclude = ['']

  function! s:myIndentLineReset() abort
    if exists('b:indentLine_enabled') ? b:indentLine_enabled :
          \ get(g:, 'indentLine_enabled', 0)
      IndentLinesReset
    endif
  endfunction

  " for vim-precious
  autocmd MyAutoCmd User PreciousFileType call s:myIndentLineReset()
'''

[[plugins]]
repo = 't9md/vim-quickhl'
hook_add = '''
  nmap <Space>hl <Plug>(quickhl-manual-this)
  nmap <Space>nohl <Plug>(quickhl-manual-reset)
'''

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  " messages
  let g:ale_echo_msg_format = '[%linter%] %code: %%s [%severity%]'

  " linters
  let g:ale_linters = {
        \ 'go': ['go build', 'gofmt', 'golint',
        \        'gosimple', 'gotype', 'go vet', 'staticcheck'],
        \ }

  " fixers
  let g:ale_fix_on_save = 1
  let g:ale_go_gofmt_options = '-s'
  let g:ale_fixers = {
        \ 'go': ['gofmt', 'goimports'],
        \ }

  " Map movement through errors without wrapping.
  nmap <silent> <C-k> <Plug>(ale_previous)
  nmap <silent> <C-j> <Plug>(ale_next)
'''

[[plugins]]
repo = 'jsfaint/gen_tags.vim'
if = 'executable("ctags") || executable("gtags")'
hook_add = '''
  let g:loaded_gentags#ctags = !executable("ctags")
  let g:loaded_gentags#gtags = !executable("gtags")
  let g:gen_tags#ctags_auto_gen  = executable("ctags")
  let g:gen_tags#gtags_auto_gen  = executable("gtags")
'''

[[plugins]]
repo = 'ozelentok/denite-gtags'
hook_add = '''
  " prefix
  nnoremap [gtags] <NOP>
  nmap <Space>g [gtags]

  " keymap
  nnoremap <silent> [gtags]d :<C-u>DeniteCursorWord gtags_def -buffer-name=gtags -mode=normal<CR>
  nnoremap <silent> [gtags]r :<C-u>DeniteCursorWord gtags_ref -buffer-name=gtags -mode=normal<CR>
  nnoremap <silent> [gtags]c :<C-u>DeniteCursorWord gtags_context -buffer-name=gtags -mode=normal<CR>
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
  let g:netrw_nogx = 1 " disable netrw's gx mapping.
  nmap gx <Plug>(openbrowser-smart-search)
  vmap gx <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo = 'ywatase/mdt.vim'
if = 'executable("mdt")'

[[plugins]]
repo = 'osyo-manga/vim-precious'
if = 0
hook_add = '''
let g:precious_enable_switch_CursorMoved = {
      \	'help' : 0
      \}
let g:precious_enable_switch_CursorMoved_i= {
      \	'help' : 0
      \}
let g:precious_enable_switch_CursorHold= {
      \	'*' : 0
      \}

  " for PartEdit
  function! PartEditGetContext()
    let l:con = context_filetype#get(precious#base_filetype())
    let l:ret = {
          \ 'filetype': l:con.filetype,
          \ 'firstline': l:con.range[0][0],
          \ 'lastline': l:con.range[1][0],
          \}
    return l:ret
  endfunction
'''

